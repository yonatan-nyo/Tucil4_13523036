defmodule TspSolver.TestCases do
  @moduledoc """
  Koleksi test cases untuk algoritma TSP.

  Berisi berbagai skenario pengujian mulai dari kasus sederhana
  hingga kasus yang lebih kompleks untuk memvalidasi implementasi algoritma.
  """

  @doc """
  Mendapatkan semua test cases.

  ## Returns
  List of tuples `{name, matrix, expected_cost}` dimana:
  - `name`: Nama test case
  - `matrix`: Matriks jarak antar kota
  - `expected_cost`: Biaya optimal yang diharapkan (optional, nil jika tidak diketahui)
  """
  def get_all_cases do
    [      {
        "Test 1",
        [
          [0, 12, 18, 24],
          [12, 0, 42, 30],
          [18, 42, 0, 36],
          [24, 30, 36, 0]
        ],
        nil
      },      {
        "Test 2",
        [
          [0, 2, 2, 2, 2],
          [2, 0, 2, 2, 2],
          [2, 2, 0, 2, 2],
          [2, 2, 2, 0, 2],
          [2, 2, 2, 2, 0]
        ],
        nil
      },      {
        "Test 3",
        [
          [0, 414, 1046, 148, 680, 947, 281, 1081],
          [414, 0, 547, 814, 281, 1068, 148, 680],
          [1046, 547, 0, 414, 814, 281, 1068, 148],
          [148, 814, 414, 0, 547, 947, 281, 1081],
          [680, 281, 814, 547, 0, 414, 814, 281],
          [947, 1068, 281, 947, 414, 0, 547, 814],
          [281, 148, 1068, 281, 814, 547, 0, 414],
          [1081, 680, 148, 1081, 281, 814, 414, 0]
        ],
        nil
      },      {
        "Test 4",
        [
          [0, 281, 680, 1068, 148, 547, 947, 385, 785, 1184],
          [281, 0, 414, 814, 1081, 281, 680, 1068, 148, 547],
          [680, 414, 0, 547, 947, 148, 1068, 281, 680, 1081],
          [1068, 814, 547, 0, 414, 814, 148, 547, 947, 281],
          [148, 1081, 947, 414, 0, 680, 1068, 148, 547, 814],
          [547, 281, 148, 814, 680, 0, 414, 947, 281, 1068],
          [947, 680, 1068, 148, 1068, 414, 0, 680, 1081, 414],
          [385, 1068, 281, 547, 148, 947, 680, 0, 814, 148],
          [785, 148, 680, 947, 547, 281, 1081, 814, 0, 414],
          [1184, 547, 1081, 281, 814, 1068, 414, 148, 414, 0]
        ],
        nil
      },      {
        "Test 5",
        [
          [0, 947, 281, 680, 1068, 148, 547, 947, 385, 785, 1184, 148],
          [947, 0, 414, 814, 281, 1081, 680, 1068, 148, 547, 947, 281],
          [281, 414, 0, 547, 947, 148, 1068, 281, 680, 1081, 414, 814],
          [680, 814, 547, 0, 414, 814, 148, 547, 947, 281, 1068, 680],
          [1068, 281, 947, 414, 0, 680, 1068, 148, 547, 814, 281, 1081],
          [148, 1081, 148, 814, 680, 0, 414, 947, 281, 1068, 680, 414],
          [547, 680, 1068, 148, 1068, 414, 0, 680, 1081, 414, 814, 1068],
          [947, 1068, 281, 547, 148, 947, 680, 0, 814, 148, 547, 947],
          [385, 148, 680, 947, 547, 281, 1081, 814, 0, 414, 947, 281],
          [785, 547, 1081, 281, 814, 1068, 414, 148, 414, 0, 680, 1068],
          [1184, 947, 414, 1068, 281, 680, 814, 547, 947, 680, 0, 148],
          [148, 281, 814, 680, 1081, 414, 1068, 947, 281, 1068, 148, 0]
        ],
        nil
      },      {
        "Test 6",
        [
          [0, 1105, 446, 1049, 754, 235, 646, 1061, 416, 935, 228, 1122, 505, 694, 523, 280, 404, 721, 598],
          [1105, 0, 226, 404, 965, 1167, 505, 754, 974, 572, 708, 943, 730, 580, 800, 1098, 904, 230, 835],
          [446, 226, 0, 730, 719, 868, 248, 1097, 817, 1078, 502, 1001, 1094, 840, 890, 462, 565, 583, 701],
          [1049, 404, 730, 0, 1127, 800, 653, 463, 716, 1118, 599, 538, 343, 770, 740, 940, 593, 1184, 847],
          [754, 965, 719, 1127, 0, 253, 571, 665, 310, 974, 1069, 895, 715, 1028, 212, 407, 350, 904, 580],
          [235, 1167, 868, 800, 253, 0, 586, 958, 182, 871, 1048, 745, 396, 1055, 140, 342, 184, 720, 517],
          [646, 505, 248, 653, 571, 586, 0, 912, 851, 1000, 594, 925, 1066, 836, 710, 360, 544, 743, 806],
          [1061, 754, 1097, 463, 665, 958, 912, 0, 1162, 584, 872, 428, 395, 900, 967, 1157, 918, 1160, 376],
          [416, 974, 817, 716, 310, 182, 851, 1162, 0, 1081, 713, 1034, 618, 1142, 209, 314, 217, 598, 334],
          [935, 572, 1078, 1118, 974, 871, 1000, 584, 1081, 0, 1092, 306, 442, 652, 1004, 1136, 1009, 832, 407],
          [228, 708, 502, 599, 1069, 1048, 594, 872, 713, 1092, 0, 1132, 552, 937, 852, 467, 697, 716, 842],
          [1122, 943, 1001, 538, 895, 745, 925, 428, 1034, 306, 1132, 0, 403, 616, 931, 1010, 930, 1111, 242],
          [505, 730, 1094, 343, 715, 396, 1066, 395, 618, 442, 552, 403, 0, 890, 656, 517, 228, 948, 584],
          [694, 580, 840, 770, 1028, 1055, 836, 900, 1142, 652, 937, 616, 890, 0, 797, 895, 962, 998, 434],
          [523, 800, 890, 740, 212, 140, 710, 967, 209, 1004, 852, 931, 656, 797, 0, 481, 204, 664, 568],
          [280, 1098, 462, 940, 407, 342, 360, 1157, 314, 1136, 467, 1010, 517, 895, 481, 0, 418, 805, 612],
          [404, 904, 565, 593, 350, 184, 544, 918, 217, 1009, 697, 930, 228, 962, 204, 418, 0, 634, 546],
          [721, 230, 583, 1184, 904, 720, 743, 1160, 598, 832, 716, 1111, 948, 998, 664, 805, 634, 0, 848],
          [598, 835, 701, 847, 580, 517, 806, 376, 334, 407, 842, 242, 584, 434, 568, 612, 546, 848, 0]
        ],
        nil
      }
    ]
  end

  @doc """
  Mendapatkan test cases berdasarkan ukuran (jumlah kota).

  ## Parameters
  - `size`: Jumlah kota yang diinginkan

  ## Returns
  List of test cases dengan ukuran yang sesuai
  """
  def get_cases_by_size(size) do
    get_all_cases()
    |> Enum.filter(fn {_name, matrix, _expected} ->
      length(matrix) == size
    end)
  end

  @doc """
  Mendapatkan test cases berdasarkan kategori.

  ## Parameters
  - `category`: :small (3-4 cities), :medium (5-6 cities), :large (7+ cities)

  ## Returns
  List of test cases dalam kategori yang diminta
  """
  def get_cases_by_category(category) do
    all_cases = get_all_cases()

    case category do
      :small ->
        Enum.filter(all_cases, fn {_name, matrix, _expected} ->
          length(matrix) <= 4
        end)

      :medium ->
        Enum.filter(all_cases, fn {_name, matrix, _expected} ->
          length(matrix) in 5..6
        end)

      :large ->
        Enum.filter(all_cases, fn {_name, matrix, _expected} ->
          length(matrix) >= 7
        end)

      _ ->
        all_cases
    end
  end

  @doc """
  Mendapatkan test case berdasarkan nama.

  ## Parameters
  - `name`: String yang harus ada dalam nama test case

  ## Returns
  Test case yang cocok atau nil jika tidak ditemukan
  """
  def get_case_by_name(name) do
    get_all_cases()
    |> Enum.find(fn {test_name, _matrix, _expected} ->
      String.contains?(String.downcase(test_name), String.downcase(name))
    end)
  end
end
